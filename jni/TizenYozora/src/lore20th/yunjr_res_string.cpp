
#include "yunjr_res_string.h"
#include "util/sm_util_set.h"

using yunjr::resource::HanString;

////////////////////////////////////////////////////////////////////////////////
// 게임의 기본 속성 문자열 (player, weapon 등)

#define RETURN_HAN_STRING(josa_set, default_has_jongsung) \
	HanString han_string; \
	\
	if ((index >= 0) && (index < sizeof(NAME)/sizeof(NAME[0]))) \
		han_string.sz_name = NAME[index]; \
	else \
		han_string.sz_name = NAME_UNKNOWN; \
	\
	static smutil::SmSet s_josa(josa_set); \
	\
	if (s_josa.isSet(index) || ((han_string.sz_name == NAME_UNKNOWN) && default_has_jongsung)) \
	{ \
		han_string.sz_josa_sub1 = L"은"; \
		han_string.sz_josa_sub2 = L"이"; \
		han_string.sz_josa_obj  = L"을"; \
		han_string.sz_josa_with = L"으"; \
	} \
	else \
	{ \
		han_string.sz_josa_sub1 = L"는"; \
		han_string.sz_josa_sub2 = L"가"; \
		han_string.sz_josa_obj  = L"를"; \
		han_string.sz_josa_with = L""; \
	} \
	\
	return han_string;


HanString yunjr::resource::getWeaponName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"불확실한 무기";
	const wchar_t* NAME[] =
	{
		L"맨손",
		L"단도",
		L"곤봉",
		L"미늘창",
		L"장검",
		L"철퇴",
		L"기병창",
		L"도끼창",
		L"삼지창",
		L"화염검",
	};

	RETURN_HAN_STRING("0,2..4,6..9", false)
}

HanString yunjr::resource::getShieldName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"불확실한 방패";
	const wchar_t* NAME[] =
	{
		L"없음",
		L"가죽 방패",
		L"청동 방패",
		L"강철 방패",
		L"은제 방패",
		L"금제 방패",
	};

	RETURN_HAN_STRING("0", false)
}

HanString yunjr::resource::getArmorName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"불확실한 갑옷";
	const wchar_t* NAME[] =
	{
		L"없음",
		L"가죽 갑옷",
		L"청동 갑옷",
		L"강철 갑옷",
		L"은제 갑옷",
		L"금제 갑옷",
	};

	RETURN_HAN_STRING("0..5", true)
}

HanString yunjr::resource::get3rdPersonName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"그";
	const wchar_t* NAME[] =
	{
		L"그",
		L"그녀",
	};

	RETURN_HAN_STRING("", false)
}

HanString yunjr::resource::getGenderName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"불확실함";
	const wchar_t* NAME[] =
	{
		L"남성",
		L"여성",
	};

	RETURN_HAN_STRING("0, 1", true)
}

HanString yunjr::resource::getConditionName(CONDITION index)
{
	const wchar_t* NAME_UNKNOWN = L"이상상태";
	const wchar_t* NAME[] =
	{
		L"good",
		L"poisoned",
		L"unconscious",
		L"dead",
	};

	RETURN_HAN_STRING("", false);
}

HanString yunjr::resource::getClassName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"불확실함";
	const wchar_t* NAME[] =
	{
		L"불확실함",
		L"기사",
		L"마법사",
		L"에스퍼",
		L"전사",
		L"전투승",
		L"닌자",
		L"사냥꾼",
		L"떠돌이",
		L"혼령",
		L"반신반인",
	};

	RETURN_HAN_STRING("0,5,7,9,10", true)
}

HanString yunjr::resource::getMagicName(int index)
{
	const wchar_t* NAME_UNKNOWN = L"";
	const wchar_t* NAME[46] =
	{
		L"", 
		L"마법 화살", 
		L"마법 화구", 
		L"마법 단창", 
		L"독 바늘", 
		L"맥동 광선", 
		L"직격 뇌전", 
		L"공기 폭풍", 
		L"열선 파동", 
		L"초음파", 
		// 10
		L"초냉기", 
		L"인공 지진", 
		L"차원 이탈", 
		L"독", 
		L"기술 무력화", 
		L"방어 무력화", 
		L"능력 저하", 
		L"마법 불능", 
		L"탈 초인화", 
		L"한명 치료", 
		L"한명 독 제거", 
		L"한명 치료와 독제거", 
		L"한명 의식 돌림", 
		L"한명 부활", 
		L"한명 치료와 독제거와 의식돌림", 
		L"한명 복합 치료", 
		L"모두 치료", 
		L"모두 독 제거", 
		L"모두 치료와 독제거", 
		L"모두 의식 돌림", 
		L"모두 치료와 독제거와 의식돌림", 
		L"모두 부활", 
		L"모두 복합 치료", 
		L"마법의 햇불", 
		L"공중 부상", 
		L"물위를 걸음", 
		L"늪위를 걸음", 
		L"기화 이동", 
		L"지형 변화", 
		L"공간 이동", 
		L"식량 제조", 
		L"투시", 
		L"예언", 
		L"독심", 
		L"천리안", 
		L"염력@@"
	};

	RETURN_HAN_STRING("1,3..8,11..13,17,22..24,29..31,33..37,39,42..45", false)
}

HanString yunjr::resource::getAuxName(AUX index)
{
	const wchar_t* NAME[] =
	{
		L"Reserved",
	};

	HanString han_string;
	
	if ((index >= 0) && (index < AUX_MAX))
	{
		han_string.sz_name = NAME[index];
	}

	return han_string;
}

////////////////////////////////////////////////////////////////////////////////
// 게임의 메시지 문자열

const wchar_t* yunjr::resource::getMessageString(MESSAGE message)
{
	static const wchar_t* MESSAGE_STRING_TABLE[MESSAGE_MAX] =
	{
		L"마법 지수가 부족했다",
		L"Noname",
		L"전투 모드가 아닐때는 공격 마법을 사용할 수 없습니다.",
		L"누구에게",
		L"모든 사람들에게",
		L"선택",
		L"강한 치료 마법은 아직 불가능 합니다.",
		L"@F<<<  방향을 선택하시오  >>>@@",
		L"북쪽으로 공간이동",
		L"남쪽으로 공간이동",
		L"동쪽으로 공간이동",
		L"서쪽으로 공간이동",
	};

	return MESSAGE_STRING_TABLE[message];
}

////////////////////////////////////////////////////////////////////////////////
// Resource 관리 utility

wchar_t yunjr::resource::getLastMultiByte(const wchar_t* sz_text)
{
	const unsigned char* p_prev;
	const unsigned char* p_ch = (const unsigned char*)sz_text;

	//??
	return 0;
/*??
	while (1)
	{
		p_prev = p_ch;

		if (*p_ch++ & 0x80)
		{
			if (*p_ch == 0)
				return *p_prev;

			++p_ch;
		}

		if (*p_ch)
			continue;

		if (*(p_prev+1))
			return int(*p_prev) << 8 | int(*(p_prev+1));
		else
			return int(*p_prev);
	}
*/
}

bool yunjr::resource::hasJongsung(unsigned short code)
{
	static const unsigned char TABLE0[] =
	{
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFB, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFE, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xF7, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xEF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xF7, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xC0, 0xFF, 0xFF, 0xFF, 0x40, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFD, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFE, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xBF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xDF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xBF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFB, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xF7, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xF7, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xDF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xF7, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 
		0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 
		0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	};

	static const unsigned char TABLE1[] =
	{
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xDF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xEF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xDC, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 
		0xFF, 0xFF, 0xEF, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 
		0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 
		0xDF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFD, 0xE7, 0xFF, 0xFF, 0xFF, 0xFE, 
		0xFF, 0xFF, 0x77, 0xBF, 0xFF, 0xFC, 0xFE, 0xFF, 0xFF, 0xDF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFC, 0xEF, 0xFF, 
		0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 
		0xFE, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 
		0xFF, 0xEC, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 
		0xFE, 0xFF, 0xFF, 0xFC, 0xFB, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xBF, 0xFF, 
		0xFF, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFB, 
		0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xDF, 0xEC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xF7, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFE, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 
		0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xBF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xDF, 0xEF, 0xB7, 0xFF, 
		0xEF, 0xEF, 0xFE, 0xF7, 0xFF, 0xBC, 0xF7, 0xDF, 0xDE, 0xFF, 
		0xF7, 0xD7, 0xED, 0xFF, 0x3F, 0xFB, 0xFF, 0xBC, 0xF6, 0xFF, 
		0xBE, 0xF9, 0xFF, 0xBD, 0xBE, 0x7F, 0xDD, 0xFB, 0xCF, 0xFC, 
		0xBF, 0xBF, 0xFF, 0xDF, 0xEF, 0xBF, 0xFD, 0xFE, 0xFF, 0x5F, 
		0xFB, 0xBC, 0xBF, 0x7F, 0xA7, 0xBE, 0xFF, 0xED, 0xFF, 0x7F, 
		0xFF, 0xDF, 0xE7, 0xFC, 0xF7, 0xFB, 0xD7, 0xFF, 0xB5, 0xF3, 
		0xFA, 0xBE, 0xF7, 0xFC, 0xFF, 0xDC, 0xFD, 0xFE, 0xFF, 0xEF, 
		0xF5, 0xE9, 0x7E, 0x7D, 0xFD, 0xEF, 0xDF, 0xFC, 0x7F, 0xBD, 
		0xFF, 0x7F, 0x7F, 0xBB, 0xFB, 0xBF, 0x7D, 0xFD, 0x3F, 0x7C, 
		0xDF, 0xFB, 0xFB, 0xFF, 0xF7, 0xFD, 0xDF, 0xFB, 0xFD, 0xFC, 
		0xFF, 0xB8, 0xFB, 0xDF, 0xFF, 0x79, 0xBD, 0xEF, 0xFF, 0x7F, 
		0xFE, 0xFF, 0xBB, 0xFC, 0xDF, 0xF7, 0xFA, 0xFF, 0x6B, 0xEB, 
		0xFF, 0xD9, 0xEF, 0xBF, 0x7F, 0xEC, 0xFF, 0x7F, 0xB7, 0xFA, 
		0xFD, 0xF9, 0x7E, 0xBD, 0xFD, 0xFF, 0xF7, 0xF8, 0xFE, 0xF7, 
		0xFF, 0xEF, 0xF7, 0xFB, 0xBF, 0xF7, 0xBE, 0xFB, 0xFB, 0xFC, 
		0xEB, 0xEF, 0xEF, 0xBF, 0xDF, 0xFB, 0xFE, 0xFF, 0x7F, 0xBB, 
		0xFD, 0xD4, 0xE7, 0xE9, 0xBF, 0xBB, 0xFB, 0xFF, 0xFB, 0xFD, 
		0xFF, 0xBB, 0xFF, 0xFC, 0x7F, 0x7F, 0xFF, 0x7E, 0xFF, 0xF7, 
		0xFB, 0xEF, 0xEF, 0xEF, 0xFB, 0xF8, 0xFD, 0xFD, 0xFE, 0xFF, 
		0xFD, 0xEF, 0xFF, 0xBF, 0xFD, 0xFE, 0xFD, 0xBC, 0xFB, 0xFB, 
		0xF3, 0xFF, 0xBE, 0xDF, 0xBB, 0xFE, 0x9F, 0xBB, 0xFB, 0xFC, 
		0xF7, 0xFE, 0xFF, 0x6F, 0xF5, 0x7F, 0xBA, 0xFB, 0xF6, 0x3B, 
		0xFD, 0xFC, 0xEF, 0xF7, 0xDF, 0xEF, 0xED, 0xBF, 0xBB, 0xF5, 
		0xFD, 0x5F, 0xBD, 0xFC, 0x7F, 0xDF, 0xDF, 0xED, 0xFF, 0x7F, 
		0x7F, 0x3F, 0xBE, 0xA7, 0xF7, 0x5C, 0xF7, 0x7E, 0xFE, 0xFF, 
		0xBF, 0xD7, 0xFD, 0xFD, 0xAF, 0xF4, 0xE7, 0xF4, 0x3F, 0x7B, 
		0xFD, 0xEF, 0xEF, 0xFE, 0xFF, 0x5F, 0xEF, 0xEF, 0xDD, 0xFC, 
		0x57, 0xBF, 0xEB, 0xDF, 0x7D, 0xFD, 0xFE, 0xFF, 0x5F, 0xEF, 
		0xEF, 0xF4, 0xDF, 0xF7, 0xDE, 0xFD, 0xEF, 0xEF, 0x7B, 0xFB, 
		0xF7, 0xFF, 0x7D, 0xFC, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xF7, 
		0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFD, 
		0xDF, 0xEF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 
		0xFD, 0xDF, 0xFF, 0x7F, 0xBD, 0xFF, 0xF7, 0xFF, 0xDF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xBD, 0xFF, 0xFF, 0x7F, 0xFE, 0xFF, 0xFB, 
		0xEF, 0x7B, 0xFF, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 
		0xDF, 0xFD, 0xEF, 0xFF, 0xFE, 0xFC, 0xF7, 0xFF, 0xFF, 0xFF, 
		0xF7, 0xFF, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFB, 0xFC, 
		0xFF, 0xFF, 0x7F, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xBF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xEF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xEF, 0x7F, 0xFF, 0xFD, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC, 
		0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xEF, 0xDF, 0xFC, 0xFF, 0x79, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFE, 0xFF, 0xFF, 
		0xBF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xFD, 0xF4, 
		0xFF, 0xFF, 0xFF, 0x7F, 0xFD, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xDC, 0xFF, 0xFD, 0xFF, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xEF, 0xFF, 0xFF, 0xFF, 0x9F, 0xBC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xDF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFC, 
		0xFD, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xDD, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xF7, 0x7F, 
		0xFF, 0xF7, 0xFF, 0xEC, 0xDF, 0xFF, 0xFE, 0xF7, 0x3F, 0xFB, 
		0xF7, 0xFF, 0xFF, 0xFE, 0xFF, 0xDC, 0xEF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFD, 0xDF, 0xD7, 0xFF, 0xFF, 0xFC, 0xFD, 0xFF, 
		0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFD, 0xFC, 
		0xFF, 0xFF, 0xDF, 0xFF, 0xDF, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 
		0xFE, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x7F, 0xFF, 0xEF, 0xDF, 0xFF, 
		0xEF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFD, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xBF, 
		0xFF, 0xEF, 0xFF, 0xEF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xBC, 
		0xFF, 0xFF, 0xFF, 0xBE, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0x7D, 0xFF, 0xF7, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFC, 0xFF, 0xBF, 0xFF, 0xFF, 
		0xEB, 0xFF, 0xFD, 0xF7, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFC, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xDB, 
		0xFF, 0xFF, 0xF7, 0xFC, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xF7, 
		0xEF, 0xFD, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFC, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFB, 0xDF, 0xFF, 0x7F, 0xFC, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 
		0xF7, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
		0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xBD, 0xFC, 0xFF, 0xDF, 
		0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0x7C, 
		0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFC, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xEC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
		0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xBC, 0xFD, 0xBF, 0xFF, 0xFF, 
		0xFF, 0xF7, 0xFF, 0xFF, 0xBF, 0x7E, 0xFF, 0x7C, 0xFF, 0xFF, 
		0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFC, 
	};

	struct ConvertingTable
	{
		unsigned char  min_lo_byte;
		unsigned char  max_lo_byte;
		unsigned char  min_hi_byte;
		unsigned char  max_hi_byte;
		const unsigned char* p_table;
	};

	static const ConvertingTable TABLE[] =
	{
		{ 0x41, 0xA0, 0x81, 0xC6, TABLE0 },
		{ 0xA1, 0xFE, 0x81, 0xFD, TABLE1 },
	};

	unsigned char lo_byte = code & 0xFF;
	unsigned char hi_byte = (code >> 8) & 0xFF;

	if (hi_byte)
	{
		for (int ixTable = 0; ixTable < sizeof(TABLE) / sizeof(TABLE[0]); ixTable++)
		{
			const ConvertingTable& table = TABLE[ixTable];

			if ((lo_byte >= table.min_lo_byte) && (lo_byte <= table.max_lo_byte) &&
				(hi_byte >= table.min_hi_byte) && (hi_byte <= table.max_hi_byte))
			{
				lo_byte -= table.min_lo_byte;
				hi_byte -= table.min_hi_byte;

				int pitch = (table.max_lo_byte - table.min_lo_byte + 8) / 8;

				return (table.p_table[hi_byte * pitch + lo_byte / 8] & (0x80 >> (lo_byte % 8))) > 0;
			}
		}
	}
	//?? 영어에 대해서도 적용해야 함

	// default
	return true;
}
